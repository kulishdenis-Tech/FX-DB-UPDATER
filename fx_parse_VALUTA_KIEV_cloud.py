# === fx_parse_VALUTA_KIEV_cloud.py ===
# Cloud –≤–µ—Ä—Å—ñ—è –ø–∞—Ä—Å–µ—Ä–∞ VALUTA_KIEV –¥–ª—è Render

import sys, io, os, re
from supabase_io import SupabaseIO, download_text, norm_price_auto, iter_message_blocks, normalize_cross_rate

# üîß Windows: —Ñ—ñ–∫—Å –∫–∏—Ä–∏–ª–∏—Ü—ñ
if os.name == "nt":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8", errors="replace")
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding="utf-8", errors="replace")

# === –ö–æ–Ω—Ñ—ñ–≥ ===
CHANNEL = "VALUTA_KIEV"

# === –°–ª–æ–≤–Ω–∏–∫ –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤ ‚Üí –≤–∞–ª—é—Ç–∏ ===
FLAG_TO_CUR = {
    'üá™üá∫': 'EUR', 'üá∫üá∏': 'USD', 'üá¨üáß': 'GBP', 'üá®üá≠': 'CHF', 
    'üáµüá±': 'PLN', 'üá®üá¶': 'CAD', 'üá®üáø': 'CZK', 'üá∏üá™': 'SEK',
    'üáØüáµ': 'JPY', 'üá≥üá¥': 'NOK', 'üá©üá∞': 'DKK', 'üá∫üá¶': 'UAH'
}

# === –†–µ–≥—É–ª—è—Ä–∫–∏ ===
CROSS_RE = re.compile(
    r'[\U0001F1E6-\U0001F1FF]{2}\s*/\s*[\U0001F1E6-\U0001F1FF]{2}\s*'
    r'(EUR|USD|GBP|CHF|PLN|CAD|CZK|SEK|JPY|NOK|DKK)\s*[:\s-]*'
    r'([0-9–ó.,]+)\s*/\s*([0-9–ó.,]+)',
    re.U | re.I
)

LINE_RE = re.compile(
    r'(?:[\U0001F1E6-\U0001F1FF]{2}\s*/\s*[\U0001F1E6-\U0001F1FF]{2}\s*)?'
    r'(USD|EUR|PLN|GBP|CHF|CAD|CZK|SEK|JPY|NOK|DKK|UAH)\s*[:\s-]*'
    r'([0-9–ó.,]+)\s*/\s*([0-9–ó.,]+)',
    re.U | re.I
)

# –ú–µ—Ç–∞–¥–∞–Ω—ñ
ID_RE      = re.compile(r'\[MESSAGE_ID\]\s*(\d+)')
DATE_RE    = re.compile(r'\[DATE\]\s*([\d-]+\s[\d:]+)')
EDITED_RE  = re.compile(r'\[EDITED\]\s*([\d-]+\s[\d:]+)')
VER_RE     = re.compile(r'\[VERSION\]\s*(\S+)')

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
HOT_KEYWORDS = ["üî•", "—Å–ø–µ—Ü–∫—É—Ä—Å", "–∞–∫—Ü—ñ", "–æ–±–º–µ–∂–µ–Ω", "–∑–Ω–∏–∂–∫", "promo", "–ø—Ä–æ–¥–∞–º–æ", "‚ö°Ô∏è", 
                "usdt", "–∫—É–ø—É—î–º–æ", "–∫—É–ø–∏–º–æ", "üí∞", "%", "–∑–æ–ª–æ—Ç–æ", "–º–µ—Ç–∞–ª", "—Å—Ä—ñ–±–ª–æ"]

def is_hot_offer(line: str) -> bool:
    ln = line.lower()
    return any(k in ln for k in HOT_KEYWORDS)

def clean_line(s: str) -> str:
    if not s: 
        return s
    return (s.replace("‚Äì", "-")
             .replace("‚Äî", "-")
             .replace("‚ÅÑ", "/")
             .replace(",", ".")
             .replace("–ó", "3").replace("–∑", "3")
             .replace("\u00A0", " ")
             .replace("Ôºö", ":")
             .replace("‚Äê", "-")
             .strip())

def extract_flags(line: str):
    """–í–∏—Ç—è–≥—É—î –ø—Ä–∞–ø–æ—Ä—Ü—ñ —è–∫ –ü–ê–†–ò Regional Indicator —Å–∏–º–≤–æ–ª—ñ–≤."""
    flags = []
    i = 0
    while i < len(line):
        if i + 1 < len(line):
            char1 = line[i]
            char2 = line[i + 1]
            if (0x1F1E6 <= ord(char1) <= 0x1F1FF and 
                0x1F1E6 <= ord(char2) <= 0x1F1FF):
                flags.append(char1 + char2)
                i += 2
                continue
        i += 1
    return flags

def process_valuta_kiev():
    """–û–±—Ä–æ–±–∫–∞ VALUTA_KIEV –∫–∞–Ω–∞–ª—É –∑ Supabase Storage"""
    
    db = SupabaseIO()
    filename = f"{CHANNEL}_raw.txt"
    raw_content = download_text(filename)
    
    if not raw_content:
        print(f"[WARN] –§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Supabase Storage", flush=True)
        return
    
    print(f"[CLOUD] ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(raw_content)} —Å–∏–º–≤–æ–ª—ñ–≤ –∑ Supabase", flush=True)
    
    raw = raw_content.replace("[NO TEXT]", "")
    lines = raw.splitlines()
    blocks = iter_message_blocks(lines, ID_RE)
    
    sorted_blocks = []
    for b in blocks:
        mid = None
        for ln in b:
            m = ID_RE.search(ln)
            if m:
                mid = int(m.group(1))
                break
        if mid:
            sorted_blocks.append((mid, b))
    sorted_blocks.sort(key=lambda x: x[0])
    
    rows = []
    
    for _, block in sorted_blocks:
        msg_id = version = published = edited = None
        for ln in block:
            if not msg_id and (m := ID_RE.search(ln)):      msg_id = m.group(1)
            if not version and (v := VER_RE.search(ln)):    version = v.group(1)
            if not published and (d := DATE_RE.search(ln)): published = d.group(1)
            if not edited and (e := EDITED_RE.search(ln)):  edited = e.group(1)
        if not msg_id or not version or not published:
            continue
        if not edited:
            edited = published

        processed_lines = set()

        # –ö—Ä–æ—Å-–∫—É—Ä—Å–∏
        for ln in block:
            if is_hot_offer(ln):
                continue
            
            ln_clean = clean_line(ln)
            m = CROSS_RE.search(ln_clean)
            if not m:
                continue

            code = m.group(1).upper()
            buy_raw, sell_raw = m.group(2), m.group(3)
            
            buy  = norm_price_auto(buy_raw)
            sell = norm_price_auto(sell_raw)
            
            if not buy or not sell:
                continue

            flags = extract_flags(ln)
            if len(flags) < 2:
                continue
            
            cur_flag1 = FLAG_TO_CUR.get(flags[0])
            cur_flag2 = FLAG_TO_CUR.get(flags[1])
            
            if not cur_flag1 or not cur_flag2:
                continue

            if code == cur_flag2:
                cur_a, cur_b = cur_flag1, cur_flag2
            elif code == cur_flag1:
                cur_a, cur_b = cur_flag1, cur_flag2
            else:
                cur_a, cur_b = cur_flag1, code

            if cur_a == "UAH" or cur_b == "UAH":
                continue
            
            if cur_a == cur_b:
                continue

            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ –∫—Ä–æ—Å-–∫—É—Ä—Å—ñ–≤ (USD –∑–∞–≤–∂–¥–∏ –¥—Ä—É–≥–∏–º)
            cur_a, cur_b, buy, sell = normalize_cross_rate(cur_a, cur_b, buy, sell)
            comment = "–∫—Ä–æ—Å-–∫—É—Ä—Å"
            
            rows.append([CHANNEL, msg_id, version, published, edited,
                        cur_a, cur_b, buy, sell, comment])
            processed_lines.add(ln.strip())

        # UAH –ø–∞—Ä–∏
        for ln in block:
            if is_hot_offer(ln):
                continue
            
            if ln.strip() in processed_lines:
                continue

            ln_clean = clean_line(ln)
            
            if re.match(r'[\U0001F1E6-\U0001F1FF]{2}\s*/\s*[\U0001F1E6-\U0001F1FF]{2}', ln):
                flags = extract_flags(ln)
                if len(flags) >= 2:
                    cur1 = FLAG_TO_CUR.get(flags[0])
                    cur2 = FLAG_TO_CUR.get(flags[1])
                    if cur1 and cur2 and cur1 != "UAH" and cur2 != "UAH":
                        continue

            m = LINE_RE.search(ln_clean)
            if not m:
                continue

            cur_a = m.group(1).upper()
            buy_raw, sell_raw = m.group(2), m.group(3)
            
            buy  = norm_price_auto(buy_raw)
            sell = norm_price_auto(sell_raw)
            
            if not buy or not sell:
                continue

            cur_b = "UAH"
            
            if cur_a == "UAH":
                continue

            comment = ""
            
            rows.append([CHANNEL, msg_id, version, published, edited,
                        cur_a, cur_b, buy, sell, comment])
    
    if rows:
        cross_rates = [r for r in rows if "–∫—Ä–æ—Å" in r[-1]]
        uah_rates = [r for r in rows if r[-1] == ""]
        inserted, skipped_db = db.insert_rates(CHANNEL, rows)
        
        print(f"{CHANNEL} | –ó–Ω–∞–π–¥–µ–Ω–æ: {len(rows)} (UAH: {len(uah_rates)}, –ö—Ä–æ—Å: {len(cross_rates)}) | –î–æ–¥–∞–Ω–æ: {inserted}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_db}", flush=True)
    else:
        print(f"{CHANNEL} | –ö—É—Ä—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", flush=True)

if __name__ == "__main__":
    process_valuta_kiev()

