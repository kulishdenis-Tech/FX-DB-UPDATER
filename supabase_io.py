# === supabase_io.py ===
# –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Supabase
# –û–±'—î–¥–Ω—É—î Storage (RAW —Ñ–∞–π–ª–∏) + Database (rates —Ç–∞–±–ª–∏—Ü—è)

import os
from supabase import create_client, Client
from dotenv import load_dotenv

load_dotenv()

SUPABASE_URL = os.environ.get("SUPABASE_URL", "")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY", "")
BUCKET_NAME = os.environ.get("RAW_BUCKET", "raw")  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ RAW_BUCKET –∑ Render –∞–±–æ "raw" —è–∫ fallback


# ============================================
# üì¶ STORAGE OPERATIONS (RAW files)
# ============================================

def get_storage_client() -> Client:
    """–ö–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Storage"""
    return create_client(SUPABASE_URL, SUPABASE_KEY)

def download_text(name: str) -> str:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –∑ bucket 'raw' —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –≤–º—ñ—Å—Ç —è–∫ UTF-8 —Ä—è–¥–æ–∫.
    –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫.
    """
    sb = get_storage_client()
    try:
        data = sb.storage.from_(BUCKET_NAME).download(name)
        if not data:
            print(f"[SUPABASE] ‚ö†Ô∏è File not found: {name}", flush=True)
            return ""
        return data.decode("utf-8", errors="ignore")
    except Exception as e:
        print(f"[SUPABASE] ‚ö†Ô∏è Download error for {name}: {e}", flush=True)
        return ""

def upload_text(name: str, content: str, upsert: bool = True) -> None:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –¥–æ Supabase bucket 'raw'.
    –Ø–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î (x-upsert: true).
    """
    sb = get_storage_client()
    try:
        headers = {
            "content-type": "text/plain",
            "x-upsert": "true" if upsert else "false",
        }
        sb.storage.from_(BUCKET_NAME).upload(name, content.encode("utf-8"), headers)
        print(f"[SUPABASE] ‚úÖ Uploaded: {name}", flush=True)
    except Exception as e:
        print(f"[SUPABASE] ‚ùå Upload error for {name}: {e}", flush=True)


# ============================================
# üíæ DATABASE OPERATIONS (rates table)
# ============================================

class SupabaseIO:
    """–£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Supabase DB"""
    
    def __init__(self):
        if not SUPABASE_URL or not SUPABASE_KEY:
            raise ValueError("‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á—ñ Supabase —É .env")
        self.client = create_client(SUPABASE_URL, SUPABASE_KEY)
        print("[CLOUD] ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Supabase", flush=True)
    
    def get_existing_records(self, channel):
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑ –ë–î —Å–ø–∏—Å–æ–∫ –≤–∂–µ —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –∫–∞–Ω–∞–ª—É.
        –ü–æ–≤–µ—Ä—Ç–∞—î set –∑ –∫–æ—Ä—Ç–µ–∂—ñ–≤: (message_id, version, currency_a, currency_b, buy, sell, edited, comment)
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ (–ª—ñ–º—ñ—Ç Supabase: 1000).
        """
        ch_id = self._get_or_create_channel(channel)
        
        try:
            existing = set()
            offset = 0
            page_size = 1000
            
            while True:
                resp = self.client.table("rates").select(
                    "message_id, version, currency_a, currency_b, buy, sell, edited, comment"
                ).eq("channel_id", ch_id).range(offset, offset + page_size - 1).execute()
                
                if not resp.data:
                    break
                
                for row in resp.data:
                    key = (
                        row['message_id'],
                        row['version'],
                        row['currency_a'],
                        row['currency_b'],
                        float(row['buy']) if row['buy'] else None,
                        float(row['sell']) if row['sell'] else None,
                        str(row['edited']) if row['edited'] else None,  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ datetime –≤ —Å—Ç—Ä–æ–∫—É
                        row['comment'] or ""  # –î–æ–¥–∞—î–º–æ comment –¥–æ –∫–ª—é—á–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
                    )
                    existing.add(key)
                
                # –Ø–∫—â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –º–µ–Ω—à–µ –Ω—ñ–∂ page_size, –∑–Ω–∞—á–∏—Ç—å —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
                if len(resp.data) < page_size:
                    break
                
                offset += page_size
            
            print(f"[CLOUD] üìä –Ü—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è {channel}: {len(existing)}", flush=True)
            return existing
        except Exception as e:
            print(f"[CLOUD] ‚ö†Ô∏è Error getting existing records: {e}", flush=True)
            return set()
    
    def insert_rates(self, channel, rows):
        """–ó–∞–ø–∏—Å—É—î –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç —É —Ç–∞–±–ª–∏—Ü—é rates, —Ñ—ñ–ª—å—Ç—Ä—É—é—á–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏."""
        ch_id = self._get_or_create_channel(channel)
        
        # 1Ô∏è‚É£ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∑–∞–ø–∏—Å–∏
        existing = self.get_existing_records(channel)
        
        # 2Ô∏è‚É£ –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–æ–≤—ñ –∑–∞–ø–∏—Å–∏
        new_rows = []
        duplicates_found = []
        
        for r in rows:
            key = (
                int(r[1]) if r[1] else None,
                r[2],
                r[5],
                r[6],
                float(r[7]) if r[7] else None,
                float(r[8]) if r[8] else None,
                r[4],
                r[9] or ""  # –î–æ–¥–∞—î–º–æ comment –¥–æ –∫–ª—é—á–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
            )
            if key not in existing:
                new_rows.append(r)
            else:
                duplicates_found.append(key)
        
        # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –≤–∏–≤—ñ–¥ –ø–µ—Ä—à–∏—Ö 3 –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        if duplicates_found:
            print(f"[CLOUD] üîç {channel}: –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {len(new_rows)} –∑ {len(rows)}", flush=True)
        else:
            print(f"[CLOUD] üîç {channel}: –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {len(new_rows)} –∑ {len(rows)}", flush=True)
            # –Ø–∫—â–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤—ñ, –¥—Ä—É–∫—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø–∏—Å—É
            if rows:
                r = rows[0]
                sample_key = (
                    int(r[1]) if r[1] else None,
                    r[2],
                    r[5],
                    r[6],
                    float(r[7]) if r[7] else None,
                    float(r[8]) if r[8] else None,
                    r[4],
                    r[9] or ""
                )
                print(f"[CLOUD] üîç –ü—Ä–∏–∫–ª–∞–¥ –∫–ª—é—á–∞ –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø–∏—Å—É: {sample_key}", flush=True)
        
        if not new_rows:
            print(f"[CLOUD] üåê {channel}: –≤—Å—ñ {len(rows)} –∑–∞–ø–∏—Å—ñ–≤ –≤–∂–µ —î –≤ –ë–î", flush=True)
            return 0, len(rows)
        
        # 3Ô∏è‚É£ –í—Å—Ç–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ –∑–∞–ø–∏—Å–∏ (–±–∞—Ç—á—É–≤–∞–Ω–Ω—è –ø–æ 50)
        inserted, skipped = 0, len(rows) - len(new_rows)
        batch_size = 50
        for i in range(0, len(new_rows), batch_size):
            batch = new_rows[i:i+batch_size]
            payload = []
            for r in batch:
                record = {
                    "channel_id": ch_id,
                    "message_id": int(r[1]) if r[1] else None,
                    "version": r[2],
                    "published": r[3],
                    "edited": r[4],
                    "currency_a": r[5],
                    "currency_b": r[6],
                    "buy": float(r[7]) if r[7] else None,
                    "sell": float(r[8]) if r[8] else None,
                    "comment": r[9],
                }
                payload.append(record)
            try:
                self.client.table("rates").insert(payload).execute()
                inserted += len(payload)
            except Exception as e:
                print(f"[CLOUD] ‚ö†Ô∏è Batch error: {e}", flush=True)
                skipped += len(payload)
        
        print(f"[CLOUD] üåê {channel}: –¥–æ–¥–∞–Ω–æ {inserted}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped}", flush=True)
        return inserted, skipped
    
    def _get_or_create_channel(self, name):
        """–û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –∫–∞–Ω–∞–ª"""
        resp = self.client.table("channels").select("id").eq("name", name).execute()
        if resp.data:
            return resp.data[0]["id"]
        insert = self.client.table("channels").insert({"name": name}).execute()
        return insert.data[0]["id"]


# ============================================
# üîç UTILITY FUNCTIONS
# ============================================

def norm_price_auto(s: str):
    """–ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ü—ñ–Ω–∏"""
    if not s:
        return None
    s = s.replace(",", ".").replace(" ", "").strip()
    try:
        return float(s)
    except:
        return None


def iter_message_blocks(lines, id_re):
    """–†–æ–∑–±–∏—Ç—Ç—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –ª–æ–≥—ñ—á–Ω—ñ –±–ª–æ–∫–∏"""
    block = []
    for line in lines:
        if id_re.search(line) and block:
            yield block
            block = []
        block.append(line)
    if block:
        yield block

def detect_currency(line: str):
    """–ê–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞–ª—é—Ç–∏"""
    currencies = ["USD", "EUR", "PLN", "GBP", "CHF", "CAD", "CZK", "SEK", "JPY", "NOK", "DKK"]
    for cur in currencies:
        if cur in line.upper():
            return cur
    return None


def normalize_cross_rate(cur_a, cur_b, buy, sell):
    """
    –ù–æ—Ä–º–∞–ª—ñ–∑—É—î –Ω–∞–ø—Ä—è–º–æ–∫ –∫—Ä–æ—Å-–∫—É—Ä—Å—É: USD –∑–∞–≤–∂–¥–∏ –¥—Ä—É–≥–∏–º (EUR/USD, GBP/USD).
    –Ø–∫—â–æ USD –ø–µ—Ä—à–∏–π (USD/EUR), –º—ñ–Ω—è—î–º–æ –º—ñ—Å—Ü—è–º–∏ –≤–∞–ª—é—Ç—É —Ç–∞ —Ü—ñ–Ω–∏.
    """
    if cur_a == "USD" and cur_b != "UAH":
        # –ú—ñ–Ω—è—î–º–æ –º—ñ—Å—Ü—è–º–∏: USD/EUR -> EUR/USD –∑ –æ–±–µ—Ä–Ω—É—Ç–∏–º–∏ —Ü—ñ–Ω–∞–º–∏
        return cur_b, cur_a, sell, buy
    return cur_a, cur_b, buy, sell


def clean_comment(text):
    """
    –û—á–∏—â–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ: –≤–∏–¥–∞–ª—è—î —Å–∏–º–≤–æ–ª–∏ –≤–∞–ª—é—Ç ($, ‚Ç¨) —Ç–∞ –∑–∞–π–≤—ñ —Å–ª–æ–≤–∞.
    """
    if not text:
        return ""
    text = text.replace("$", "").replace("‚Ç¨", "")
    text = text.replace("  –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è —É—Ç–æ—á–Ω—é–π—Ç–µ", "")
    return text.strip()


