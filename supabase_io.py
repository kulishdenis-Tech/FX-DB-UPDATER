# === supabase_io.py ===
# –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Supabase
# –û–±'—î–¥–Ω—É—î Storage (RAW —Ñ–∞–π–ª–∏) + Database (rates —Ç–∞–±–ª–∏—Ü—è)

import os
from supabase import create_client, Client
from dotenv import load_dotenv
from decimal import Decimal, InvalidOperation

load_dotenv()

SUPABASE_URL = os.environ["SUPABASE_URL"]
SUPABASE_KEY = os.environ["SUPABASE_KEY"]
BUCKET_NAME = os.environ.get("RAW_BUCKET", "raw")  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ RAW_BUCKET –∑ Render –∞–±–æ "raw" —è–∫ fallback


# ============================================
# üì¶ STORAGE OPERATIONS (RAW files)
# ============================================

def get_storage_client() -> Client:
    """–ö–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Storage"""
    return create_client(SUPABASE_URL, SUPABASE_KEY)

def download_text(name: str) -> str:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –∑ bucket 'raw' —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –≤–º—ñ—Å—Ç —è–∫ UTF-8 —Ä—è–¥–æ–∫.
    –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫.
    """
    sb = get_storage_client()
    try:
        data = sb.storage.from_(BUCKET_NAME).download(name)
        if not data:
            print(f"[SUPABASE] ‚ö†Ô∏è File not found: {name}")
            return ""
        return data.decode("utf-8", errors="ignore")
    except Exception as e:
        print(f"[SUPABASE] ‚ö†Ô∏è Download error for {name}: {e}")
        return ""

def upload_text(name: str, content: str, upsert: bool = True) -> None:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –¥–æ Supabase bucket 'raw'.
    –Ø–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î (x-upsert: true).
    """
    sb = get_storage_client()
    try:
        headers = {
            "content-type": "text/plain",
            "x-upsert": "true" if upsert else "false",
        }
        sb.storage.from_(BUCKET_NAME).upload(name, content.encode("utf-8"), headers)
        print(f"[SUPABASE] ‚úÖ Uploaded: {name}")
    except Exception as e:
        print(f"[SUPABASE] ‚ùå Upload error for {name}: {e}")


# ============================================
# üíæ DATABASE OPERATIONS (rates table)
# ============================================

class SupabaseIO:
    """–£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Supabase DB"""
    
    def __init__(self):
        if not SUPABASE_URL or not SUPABASE_KEY:
            raise ValueError("‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á—ñ Supabase —É .env")
        self.client = create_client(SUPABASE_URL, SUPABASE_KEY)
        print("[CLOUD] ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Supabase")
    
    def insert_rates(self, channel, rows):
        """–ó–∞–ø–∏—Å—É—î –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç —É —Ç–∞–±–ª–∏—Ü—é rates, —Å—Ç–≤–æ—Ä—é—î –∫–∞–Ω–∞–ª —è–∫—â–æ —Ç—Ä–µ–±–∞."""
        ch_id = self._get_or_create_channel(channel)
        inserted, skipped = 0, 0
        
        # –ë–∞—Ç—á—É–≤–∞–Ω–Ω—è (–ø–æ 10 —Ä—è–¥–∫—ñ–≤ –∑–∞ —Ä–∞–∑)
        batch_size = 10
        for i in range(0, len(rows), batch_size):
            batch = rows[i:i+batch_size]
            payload = []
            for r in batch:
                record = {
                    "channel_id": ch_id,
                    "message_id": int(r[1]) if r[1] else None,
                    "version": r[2],
                    "published": r[3],
                    "edited": r[4],
                    "currency_a": r[5],
                    "currency_b": r[6],
                    "buy": float(r[7]) if r[7] else None,
                    "sell": float(r[8]) if r[8] else None,
                    "comment": r[9],
                }
                payload.append(record)
            try:
                self.client.table("rates").insert(payload).execute()
                inserted += len(payload)
            except Exception as e:
                # –î—É–±–ª—ñ–∫–∞—Ç –∞–±–æ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞
                print(f"[CLOUD] ‚ö†Ô∏è Batch error: {e}")
                skipped += len(payload)
        
        print(f"[CLOUD] üåê {channel}: –¥–æ–¥–∞–Ω–æ {inserted}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped}")
        return inserted, skipped
    
    def get_last_rates(self, channel):
        """
        –û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –∫—É—Ä—Å–∏ –¥–ª—è –∫–∞–Ω–∞–ª—É –∑ Supabase –ë–î.
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫: {(currency_a, currency_b): (buy, sell)}
        """
        ch_id = self._get_or_create_channel(channel)
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∫—É—Ä—Å–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –≤–∞–ª—é—Ç–Ω–æ—ó –ø–∞—Ä–∏
            resp = self.client.table("rates").select(
                "currency_a, currency_b, buy, sell"
            ).eq("channel_id", ch_id).execute()
            
            # –ì—Ä—É–ø—É—î–º–æ –ø–æ –ø–∞—Ä–∞—Ö —ñ –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π (–ø—Ä–æ—Å—Ç–æ –ø–µ—Ä—à–∏–π —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)
            last_rates = {}
            for row in resp.data:
                pair_key = (row['currency_a'], row['currency_b'])
                # –Ø–∫—â–æ –≤–∂–µ —î –ø–∞—Ä–∞, –∑–∞–ª–∏—à–∞—î–º–æ –ø–µ—Ä—à—É (–∞–ª–µ —Ü–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
                if pair_key not in last_rates:
                    last_rates[pair_key] = (row['buy'], row['sell'])
            
            print(f"[CLOUD] –û—Å—Ç–∞–Ω–Ω—ñ –∫—É—Ä—Å–∏ –≤ –ë–î: {len(last_rates)} –ø–∞—Ä")
            return last_rates
        except Exception as e:
            print(f"[CLOUD] ‚ö†Ô∏è Error getting last rates: {e}")
            return {}
    
    def _get_or_create_channel(self, name):
        """–û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –∫–∞–Ω–∞–ª"""
        resp = self.client.table("channels").select("id").eq("name", name).execute()
        if resp.data:
            return resp.data[0]["id"]
        insert = self.client.table("channels").insert({"name": name}).execute()
        return insert.data[0]["id"]


# ============================================
# üîç UTILITY FUNCTIONS
# ============================================

def is_rate_changed(new_rate, last_rate):
    """–ü–æ—Ä—ñ–≤–Ω—é—î –∫—É—Ä—Å–∏ —á–∏—Å–ª–æ–≤–æ, —â–æ–± —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ 41.5 vs 41.50"""
    if not last_rate:
        return True
    buy_old, sell_old = last_rate
    _, _, buy_new, sell_new = new_rate
    try:
        b_old, s_old = Decimal(buy_old), Decimal(sell_old)
        b_new, s_new = Decimal(buy_new), Decimal(sell_new)
    except InvalidOperation:
        return buy_old != buy_new or sell_old != sell_new
    return (b_old != b_new) or (s_old != s_new)


def norm_price_auto(s: str):
    """–ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ü—ñ–Ω–∏"""
    if not s:
        return None
    s = s.replace(",", ".").replace(" ", "").strip()
    try:
        return float(s)
    except:
        return None


def iter_message_blocks(lines, id_re):
    """–†–æ–∑–±–∏—Ç—Ç—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –ª–æ–≥—ñ—á–Ω—ñ –±–ª–æ–∫–∏"""
    block = []
    for line in lines:
        if id_re.search(line) and block:
            yield block
            block = []
        block.append(line)
    if block:
        yield block

