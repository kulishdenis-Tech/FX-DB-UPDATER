# === supabase_io.py (CLOUD FULL VERSION) ===
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Supabase:
- –æ—Ç—Ä–∏–º–∞–Ω–Ω—è RAW —Ñ–∞–π–ª—ñ–≤ –∑ bucket 'raw'
- —á–∏—Ç–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∫—É—Ä—Å—ñ–≤ —ñ–∑ —Ç–∞–±–ª–∏—Ü—ñ rates
- –∑–∞–ø–∏—Å –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—é rates
- –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü–µ—é channels
"""

import os
from supabase import create_client

# —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
RAW_BUCKET = os.getenv("RAW_BUCKET", "raw")

client = create_client(SUPABASE_URL, SUPABASE_KEY)

# === 1Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è RAW —Ñ–∞–π–ª—É –∑ bucket ===
def get_raw_from_supabase(filename: str) -> str:
    try:
        res = client.storage.from_(RAW_BUCKET).download(filename)
        text = res.decode("utf-8") if res else None
        if text:
            print(f"[CLOUD] ‚úÖ RAW {filename} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ({len(text)} —Å–∏–º–≤–æ–ª—ñ–≤)")
        else:
            print(f"[CLOUD] ‚ö†Ô∏è RAW {filename} –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return text
    except Exception as e:
        print(f"[ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ RAW ({filename}): {e}")
        return None


# === 2Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è channel_id ===
def get_channel_id(channel_name: str) -> int:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î ID –∫–∞–Ω–∞–ª—É –∑ —Ç–∞–±–ª–∏—Ü—ñ channels.
    –Ø–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î ‚Äî —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å.
    """
    try:
        data = client.table("channels").select("id").eq("name", channel_name).execute()
        if data.data:
            return data.data[0]["id"]

        # —Å—Ç–≤–æ—Ä—é—î–º–æ, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        new = client.table("channels").insert({"name": channel_name}).execute()
        return new.data[0]["id"]
    except Exception as e:
        print(f"[ERROR] get_channel_id({channel_name}): {e}")
        return None


# === 3Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∫—É—Ä—Å—ñ–≤ ===
def get_prev_rates(channel_name: str) -> dict:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –∫—É—Ä—Å–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ rates –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—ñ–≤.
    """
    try:
        ch_id = get_channel_id(channel_name)
        data = client.table("rates").select(
            "currency_a, currency_b, buy, sell, comment"
        ).eq("channel_id", ch_id).order("id", desc=True).limit(500).execute()

        result = {}
        for row in data.data:
            key = (row["currency_a"], row["currency_b"], row.get("comment", ""))
            result[key] = (row["buy"], row["sell"])

        print(f"[CLOUD] üîÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(result)} –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∫—É—Ä—Å—ñ–≤ ({channel_name})")
        return result
    except Exception as e:
        print(f"[ERROR] get_prev_rates({channel_name}): {e}")
        return {}


# === 4Ô∏è‚É£ –ó–∞–ø–∏—Å –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—é rates ===
def save_to_supabase(rows: list, channel_name: str) -> int:
    """
    –ó–∞–ø–∏—Å—É—î –Ω–æ–≤—ñ –∫—É—Ä—Å–∏ —É —Ç–∞–±–ª–∏—Ü—é rates.
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤.
    """
    if not rows:
        print(f"[CLOUD] ‚è© –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤ –¥–ª—è {channel_name}")
        return 0

    try:
        ch_id = get_channel_id(channel_name)
        for r in rows:
            r["channel_id"] = ch_id

        resp = client.table("rates").insert(rows).execute()
        if resp.data:
            count = len(resp.data)
            print(f"[CLOUD] ‚úÖ –î–æ–¥–∞–Ω–æ {count} —Ä—è–¥–∫—ñ–≤ ({channel_name})")
            return count
        else:
            print(f"[CLOUD] ‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ data –¥–ª—è {channel_name}")
            return 0
    except Exception as e:
        print(f"[ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ —É Supabase ({channel_name}): {e}")
        return 0
