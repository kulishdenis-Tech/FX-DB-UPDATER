# === fx_parse_VALUTA_KIEV_auto.py (v9.0 - –§–Ü–ù–ê–õ–¨–ù–ê –í–ï–†–°–Ü–Ø) ===

import sys, io, os, re
from parser_utils_v2 import norm_price_auto, iter_message_blocks, save_rows
from version_control import load_last_rates, is_rate_changed

# üîß Windows: —Ñ—ñ–∫—Å –∫–∏—Ä–∏–ª–∏—Ü—ñ
if os.name == "nt":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8", errors="replace")
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding="utf-8", errors="replace")

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BASE_DIR   = r"C:\Users\kulis\Documents\Google drive\Exchange"
RAW_DIR    = os.path.join(BASE_DIR, "RAW")
PARSED_DIR = os.path.join(BASE_DIR, "PARSED")
os.makedirs(PARSED_DIR, exist_ok=True)

CHANNEL     = "VALUTA_KIEV"
INPUT_FILE  = os.path.join(RAW_DIR,   f"{CHANNEL}_raw.txt")
OUTPUT_FILE = os.path.join(PARSED_DIR, f"{CHANNEL}_parsed.csv")

# === –°–ª–æ–≤–Ω–∏–∫ –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤ ‚Üí –≤–∞–ª—é—Ç–∏ ===
FLAG_TO_CUR = {
    'üá™üá∫': 'EUR', 'üá∫üá∏': 'USD', 'üá¨üáß': 'GBP', 'üá®üá≠': 'CHF', 
    'üáµüá±': 'PLN', 'üá®üá¶': 'CAD', 'üá®üáø': 'CZK', 'üá∏üá™': 'SEK',
    'üáØüáµ': 'JPY', 'üá≥üá¥': 'NOK', 'üá©üá∞': 'DKK', 'üá∫üá¶': 'UAH'
}

# === –†–µ–≥—É–ª—è—Ä–∫–∏ ===
# 1) –ö–†–û–°-–ö–£–†–°–ò: üá™üá∫/üá∫üá∏EUR: 1,165 / 1,169
CROSS_RE = re.compile(
    r'[\U0001F1E6-\U0001F1FF]{2}\s*/\s*[\U0001F1E6-\U0001F1FF]{2}\s*'  # –¥–≤–∞ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
    r'(EUR|USD|GBP|CHF|PLN|CAD|CZK|SEK|JPY|NOK|DKK)\s*[:\s-]*'
    r'([0-9–ó.,]+)\s*/\s*([0-9–ó.,]+)',
    re.U | re.I
)

# 2) UAH –ü–ê–†–ò: üá∫üá∏/üá∫üá¶USD: 42,13 / 42,18
LINE_RE = re.compile(
    r'(?:[\U0001F1E6-\U0001F1FF]{2}\s*/\s*[\U0001F1E6-\U0001F1FF]{2}\s*)?'  # –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
    r'(USD|EUR|PLN|GBP|CHF|CAD|CZK|SEK|JPY|NOK|DKK|UAH)\s*[:\s-]*'
    r'([0-9–ó.,]+)\s*/\s*([0-9–ó.,]+)',
    re.U | re.I
)

# –ú–µ—Ç–∞–¥–∞–Ω—ñ
ID_RE      = re.compile(r'\[MESSAGE_ID\]\s*(\d+)')
DATE_RE    = re.compile(r'\[DATE\]\s*([\d-]+\s[\d:]+)')
EDITED_RE  = re.compile(r'\[EDITED\]\s*([\d-]+\s[\d:]+)')
VER_RE     = re.compile(r'\[VERSION\]\s*(\S+)')

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
HOT_KEYWORDS = ["üî•", "—Å–ø–µ—Ü–∫—É—Ä—Å", "–∞–∫—Ü—ñ", "–æ–±–º–µ–∂–µ–Ω", "–∑–Ω–∏–∂–∫", "promo", "–ø—Ä–æ–¥–∞–º–æ", "‚ö°Ô∏è", 
                "usdt", "–∫—É–ø—É—î–º–æ", "–∫—É–ø–∏–º–æ", "üí∞", "%", "–∑–æ–ª–æ—Ç–æ", "–º–µ—Ç–∞–ª", "—Å—Ä—ñ–±–ª–æ"]

def is_hot_offer(line: str) -> bool:
    ln = line.lower()
    return any(k in ln for k in HOT_KEYWORDS)

def clean_line(s: str) -> str:
    if not s: 
        return s
    return (s.replace("‚Äì", "-")
             .replace("‚Äî", "-")
             .replace("‚ÅÑ", "/")
             .replace(",", ".")
             .replace("–ó", "3").replace("–∑", "3")
             .replace("\u00A0", " ")
             .replace("Ôºö", ":")
             .replace("‚Äê", "-")
             .strip())

def extract_flags(line: str):
    """
    –í–ò–ü–†–ê–í–õ–ï–ù–ê –≤–µ—Ä—Å—ñ—è - –≤–∏—Ç—è–≥—É—î –ø—Ä–∞–ø–æ—Ä—Ü—ñ —è–∫ –ü–ê–†–ò Regional Indicator —Å–∏–º–≤–æ–ª—ñ–≤.
    –ü—Ä–∞–ø–æ—Ä—Ü—ñ Unicode (üá™üá∫, üá∫üá∏) —Å–∫–ª–∞–¥–∞—é—Ç—å—Å—è –∑ –î–í–û–• —Å–∏–º–≤–æ–ª—ñ–≤ Regional Indicator.
    """
    flags = []
    i = 0
    while i < len(line):
        if i + 1 < len(line):
            char1 = line[i]
            char2 = line[i + 1]
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ–±–∏–¥–≤–∞ —Å–∏–º–≤–æ–ª–∏ —î Regional Indicator (U+1F1E6 - U+1F1FF)
            if (0x1F1E6 <= ord(char1) <= 0x1F1FF and 
                0x1F1E6 <= ord(char2) <= 0x1F1FF):
                flags.append(char1 + char2)  # –î–æ–¥–∞—î–º–æ –ü–ê–†–£ —Å–∏–º–≤–æ–ª—ñ–≤
                i += 2
                continue
        i += 1
    return flags

def process_file():
    rows = []
    if not os.path.exists(INPUT_FILE):
        print(f"[WARN] –§–∞–π–ª {INPUT_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return rows, 0

    raw = open(INPUT_FILE, "r", encoding="utf-8").read().replace("[NO TEXT]", "")
    lines = raw.splitlines()
    blocks = iter_message_blocks(lines, ID_RE)
    previous_rates = load_last_rates(OUTPUT_FILE)

    sorted_blocks = []
    for b in blocks:
        mid = None
        for ln in b:
            m = ID_RE.search(ln)
            if m:
                mid = int(m.group(1))
                break
        if mid:
            sorted_blocks.append((mid, b))
    sorted_blocks.sort(key=lambda x: x[0])

    skipped = 0
    for _, block in sorted_blocks:
        msg_id = version = published = edited = None
        for ln in block:
            if not msg_id and (m := ID_RE.search(ln)):      msg_id = m.group(1)
            if not version and (v := VER_RE.search(ln)):    version = v.group(1)
            if not published and (d := DATE_RE.search(ln)): published = d.group(1)
            if not edited and (e := EDITED_RE.search(ln)):  edited = e.group(1)
        
        if not msg_id or not version or not published:
            continue
        if not edited:
            edited = published

        found_any = False
        processed_lines = set()

        # === 1Ô∏è‚É£ –ö–†–û–°-–ö–£–†–°–ò (EUR/USD, GBP/USD —Ç–æ—â–æ) ===
        for ln in block:
            if is_hot_offer(ln):
                continue
            
            ln_clean = clean_line(ln)
            m = CROSS_RE.search(ln_clean)
            if not m:
                continue

            code = m.group(1).upper()
            buy_raw, sell_raw = m.group(2), m.group(3)
            
            buy  = norm_price_auto(buy_raw)
            sell = norm_price_auto(sell_raw)
            
            if not buy or not sell:
                continue

            # –í–∏—Ç—è–≥—É—î–º–æ –≤–∞–ª—é—Ç–∏ –∑ –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤ (–í–ò–ü–†–ê–í–õ–ï–ù–ê —Ñ—É–Ω–∫—Ü—ñ—è)
            flags = extract_flags(ln)
            if len(flags) < 2:
                continue
            
            cur_flag1 = FLAG_TO_CUR.get(flags[0])
            cur_flag2 = FLAG_TO_CUR.get(flags[1])
            
            if not cur_flag1 or not cur_flag2:
                continue

            # –í–ò–ü–†–ê–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê: –ü–µ—Ä—à–∏–π –ø—Ä–∞–ø–æ—Ä–µ—Ü—å = –±–∞–∑–æ–≤–∞ –≤–∞–ª—é—Ç–∞ (currency_a)
            # –§–æ—Ä–º–∞—Ç: üá¨üáß/üá∫üá∏USD –æ–∑–Ω–∞—á–∞—î GBP/USD (–ø–µ—Ä—à–∏–π –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –∑–∞–≤–∂–¥–∏ –±–∞–∑–∞)
            if code == cur_flag2:
                # –ö–æ–¥ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ –¥—Ä—É–≥–∏–º –ø—Ä–∞–ø–æ—Ä—Ü–µ–º - –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
                cur_a, cur_b = cur_flag1, cur_flag2  # ‚úÖ GBP, USD
            elif code == cur_flag1:
                # –ö–æ–¥ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ –ø–µ—Ä—à–∏–º –ø—Ä–∞–ø–æ—Ä—Ü–µ–º - —Ç–∞–∫–æ–∂ –∑–∞–ª–∏—à–∞—î–º–æ –ø–æ—Ä—è–¥–æ–∫
                cur_a, cur_b = cur_flag1, cur_flag2  # ‚úÖ EUR, USD
            else:
                # –ö–æ–¥ –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è - –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –ø—Ä–∞–ø–æ—Ä–µ—Ü—å —è–∫ –±–∞–∑—É
                cur_a, cur_b = cur_flag1, code

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–æ—Å-–∫—É—Ä—Å (–±–µ–∑ UAH)
            if cur_a == "UAH" or cur_b == "UAH":
                continue
            
            if cur_a == cur_b:
                continue

            comment = f"–∫—Ä–æ—Å-–∫—É—Ä—Å ({cur_a}/{cur_b})"
            
            pair_key = (cur_a, cur_b)
            new_rate = (cur_a, cur_b, buy, sell)
            
            if not is_rate_changed(new_rate, previous_rates.get(pair_key)):
                skipped += 1
                continue

            previous_rates[pair_key] = (buy, sell)
            rows.append([CHANNEL, msg_id, version, published, edited,
                        cur_a, cur_b, buy, sell, comment])
            found_any = True
            processed_lines.add(ln.strip())

        # === 2Ô∏è‚É£ UAH –ü–ê–†–ò (USD/UAH, EUR/UAH —Ç–æ—â–æ) ===
        for ln in block:
            if is_hot_offer(ln):
                continue
            
            if ln.strip() in processed_lines:
                continue

            ln_clean = clean_line(ln)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —è–≤–Ω—ñ –∫—Ä–æ—Å-–∫—É—Ä—Å–∏
            if re.match(r'[\U0001F1E6-\U0001F1FF]{2}\s*/\s*[\U0001F1E6-\U0001F1FF]{2}', ln):
                flags = extract_flags(ln)
                if len(flags) >= 2:
                    cur1 = FLAG_TO_CUR.get(flags[0])
                    cur2 = FLAG_TO_CUR.get(flags[1])
                    if cur1 and cur2 and cur1 != "UAH" and cur2 != "UAH":
                        continue  # –¶–µ –∫—Ä–æ—Å-–∫—É—Ä—Å

            m = LINE_RE.search(ln_clean)
            if not m:
                continue

            cur_a = m.group(1).upper()
            buy_raw, sell_raw = m.group(2), m.group(3)
            
            buy  = norm_price_auto(buy_raw)
            sell = norm_price_auto(sell_raw)
            
            if not buy or not sell:
                continue

            cur_b = "UAH"
            
            if cur_a == "UAH":
                continue

            comment = ""

            pair_key = (cur_a, cur_b)
            new_rate = (cur_a, cur_b, buy, sell)
            
            if not is_rate_changed(new_rate, previous_rates.get(pair_key)):
                skipped += 1
                continue

            previous_rates[pair_key] = (buy, sell)
            rows.append([CHANNEL, msg_id, version, published, edited,
                        cur_a, cur_b, buy, sell, comment])
            found_any = True

    return rows, skipped

def parse_once():
    print(f"[RUN] –û–±—Ä–æ–±–∫–∞ RAW –¥–ª—è –∫–∞–Ω–∞–ª—É {CHANNEL}")
    rows, skipped = process_file()
    found = len(rows) + skipped
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—Ä–æ—Å-–∫—É—Ä—Å—ñ–≤ —Ç–∞ UAH –ø–∞—Ä
    cross_rates = [r for r in rows if r[-1].startswith("–∫—Ä–æ—Å-–∫—É—Ä—Å")]
    uah_rates = [r for r in rows if r[-1] == ""]
    
    print(f"[FOUND] –£ RAW: {found} –∫—É—Ä—Å—ñ–≤")
    print(f"[NEW] –ù–æ–≤–∏—Ö: {len(rows)} | [SKIPPED] –ë–µ–∑ –∑–º—ñ–Ω: {skipped}")
    print(f"  ‚Üí UAH –ø–∞—Ä–∏: {len(uah_rates)} | –ö—Ä–æ—Å-–∫—É—Ä—Å–∏: {len(cross_rates)}")
    
    save_rows(rows, OUTPUT_FILE)
    if not rows:
        print("[INFO] –ù–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤ –Ω–µ–º–∞—î.")
    else:
        print(f"[SAVED] {len(rows)} –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤ —É {OUTPUT_FILE}")
    print("[DONE] –ì–æ—Ç–æ–≤–æ.")

if __name__ == "__main__":
    parse_once()