# === fx_parse_SWAPS_auto.py (v2.0 - Supabase + CSV) ===

import sys, io, os, re
from parser_utils_v2 import norm_price_auto, iter_message_blocks, save_rows  # ‚úÖ –Ω–æ–≤–∏–π —ñ–º–ø–æ—Ä—Ç
from version_control import load_last_rates, is_rate_changed

# üîß Windows: —Ñ—ñ–∫—Å –∫–∏—Ä–∏–ª–∏—Ü—ñ (—â–æ–± —Ç–µ—Ä–º—ñ–Ω–∞–ª –Ω–µ –∫—Ä–∞–∫–æ–∑—è–±–∏–≤)
if os.name == "nt":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8", errors="replace")
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding="utf-8", errors="replace")

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BASE_DIR   = os.path.dirname(os.path.abspath(__file__))
RAW_DIR    = os.path.join(BASE_DIR, "RAW")
PARSED_DIR = os.path.join(BASE_DIR, "PARSED")
os.makedirs(PARSED_DIR, exist_ok=True)

CHANNEL     = "SWAPS"
INPUT_FILE  = os.path.join(RAW_DIR,   f"{CHANNEL}_raw.txt")
OUTPUT_FILE = os.path.join(PARSED_DIR, f"{CHANNEL}_parsed.csv")

# === –†–µ–≥—É–ª—è—Ä–∫–∏ ===
# üá∫üá∏/üá∫üá¶ USD-UAH 42,10 / 42,45
LINE_RE = re.compile(
    r'[\U0001F1E6-\U0001F1FF]{2}\s*/\s*[\U0001F1E6-\U0001F1FF]{2}\s+'
    r'([A-Z]{3})[-/]([A-Z]{3})\s+([0-9.,]+)\s*/\s*([0-9.,]+)',
    re.U | re.I
)

# –ú–µ—Ç–∞–¥–∞–Ω—ñ
ID_RE      = re.compile(r'\[MESSAGE_ID\]\s*(\d+)')
DATE_RE    = re.compile(r'\[DATE\]\s*([\d-]+\s[\d:]+)')
EDITED_RE  = re.compile(r'\[EDITED\]\s*([\d-]+\s[\d:]+)')
VER_RE     = re.compile(r'\[VERSION\]\s*(\S+)')

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —à—É–º—É
HOT_KEYWORDS = [
    "–≤—ñ–¥ $2000", "–§—ñ–∫—Å–∞—Ü—ñ—è –∫—É—Ä—Å—É", "–æ–ø—Ç–æ–≤–∏–º –∫—É—Ä—Å–æ–º", "Tether", "USDT",
    "–∫—É–ø—é—Ä–∏", "–ì–ê–†–ù–û–ú–£ —Å—Ç–∞–Ω—ñ", "–∞–∫—Ü—ñ", "‚òé", "+380", "üì±", "Telegram",
    "–ê–î–†–ï–°–ò", "–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏", "–≤—É–ª.", "–ö–∏—ó–≤", "–ü–∞–ª–∞—Ü", "–º–µ—Ç—Ä–æ", 
    "‚åö", "üì®", "üîê", "‚úÖ", "üí∞", "üí∏", "–≤—ñ–¥ 10 000"
]

def is_hot_offer(line: str) -> bool:
    """–§—ñ–ª—å—Ç—Ä—É—î —Ä–µ–∫–ª–∞–º–Ω—ñ —Ä—è–¥–∫–∏"""
    ln = line.lower()
    return any(k.lower() in ln for k in HOT_KEYWORDS)

def clean_line(s: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç—É"""
    if not s:
        return s
    return (s.replace("‚Äì", "-")
             .replace("‚Äî", "-")
             .replace(",", ".")
             .strip())

def process_file():
    rows = []
    if not os.path.exists(INPUT_FILE):
        print(f"[WARN] –§–∞–π–ª {INPUT_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return rows, 0

    raw = open(INPUT_FILE, "r", encoding="utf-8").read().replace("[NO TEXT]", "")
    lines = raw.splitlines()
    blocks = iter_message_blocks(lines, ID_RE)
    previous_rates = load_last_rates(OUTPUT_FILE)

    # –°–æ—Ä—Ç—É—î–º–æ –±–ª–æ–∫–∏ –∑–∞ MESSAGE_ID
    sorted_blocks = []
    for b in blocks:
        mid = None
        for ln in b:
            m = ID_RE.search(ln)
            if m:
                mid = int(m.group(1))
                break
        if mid:
            sorted_blocks.append((mid, b))
    sorted_blocks.sort(key=lambda x: x[0])

    skipped = 0
    for _, block in sorted_blocks:
        msg_id = version = published = edited = None
        for ln in block:
            if not msg_id and (m := ID_RE.search(ln)):      msg_id = m.group(1)
            if not version and (v := VER_RE.search(ln)):    version = v.group(1)
            if not published and (d := DATE_RE.search(ln)): published = d.group(1)
            if not edited and (e := EDITED_RE.search(ln)):  edited = e.group(1)
        if not msg_id or not version or not published:
            continue
        if not edited:
            edited = published

        for ln in block:
            if is_hot_offer(ln):
                continue
            ln_clean = clean_line(ln)
            m = LINE_RE.search(ln_clean)
            if not m:
                continue

            cur_a = m.group(1).upper()
            cur_b = m.group(2).upper()
            buy  = norm_price_auto(m.group(3))
            sell = norm_price_auto(m.group(4))
            if not buy or not sell:
                continue

            comment = "" if "UAH" in (cur_a, cur_b) else f"–∫—Ä–æ—Å-–∫—É—Ä—Å ({cur_a}/{cur_b})"

            pair_key = (cur_a, cur_b)
            new_rate = (cur_a, cur_b, buy, sell)

            if not is_rate_changed(new_rate, previous_rates.get(pair_key)):
                skipped += 1
                continue

            previous_rates[pair_key] = (buy, sell)
            rows.append([CHANNEL, msg_id, version, published, edited,
                         cur_a, cur_b, buy, sell, comment])

    return rows, skipped


def parse_once():
    """–û—Å–Ω–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫"""
    print(f"[RUN] –û–±—Ä–æ–±–∫–∞ RAW –¥–ª—è –∫–∞–Ω–∞–ª—É {CHANNEL}")
    rows, skipped = process_file()
    found = len(rows) + skipped
    cross_rates = [r for r in rows if "–∫—Ä–æ—Å" in r[-1]]
    uah_rates = [r for r in rows if r[-1] == ""]

    print(f"[FOUND] –£ RAW: {found} | [NEW] {len(rows)} | [SKIPPED] {skipped}")
    print(f"  ‚Üí UAH –ø–∞—Ä: {len(uah_rates)} | –ö—Ä–æ—Å-–∫—É—Ä—Å—ñ–≤: {len(cross_rates)}")

    # üü¢ –û–Ω–æ–≤–ª–µ–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    save_rows(rows, OUTPUT_FILE)

    if not rows:
        print("[INFO] –ù–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤ –Ω–µ–º–∞—î.")
    print("[DONE] ‚úÖ –ì–æ—Ç–æ–≤–æ.")


if __name__ == "__main__":
    parse_once()
