# === fx_parse_SWAPS_auto.py (v3.0 - CLOUD) ===
# Cloud –≤–µ—Ä—Å—ñ—è –ø–∞—Ä—Å–µ—Ä–∞ SWAPS –¥–ª—è Render
# –ß–∏—Ç–∞—î –∑ Supabase Storage, –ø–∏—à–µ –≤ Supabase DB

import sys, io, os, re
from supabase_io import SupabaseIO, download_text, norm_price_auto, iter_message_blocks

# üîß Windows: —Ñ—ñ–∫—Å –∫–∏—Ä–∏–ª–∏—Ü—ñ
if os.name == "nt":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding="utf-8", errors="replace")
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding="utf-8", errors="replace")

# === –ö–æ–Ω—Ñ—ñ–≥ ===
CHANNEL = "SWAPS"

# === –†–µ–≥—É–ª—è—Ä–∫–∏ ===
LINE_RE = re.compile(
    r'[\U0001F1E6-\U0001F1FF]{2}\s*/\s*[\U0001F1E6-\U0001F1FF]{2}\s+'
    r'([A-Z]{3})[-/]([A-Z]{3})\s+([0-9.,]+)\s*/\s*([0-9.,]+)',
    re.U | re.I
)

# –ú–µ—Ç–∞–¥–∞–Ω—ñ
ID_RE      = re.compile(r'\[MESSAGE_ID\]\s*(\d+)')
DATE_RE    = re.compile(r'\[DATE\]\s*([\d-]+\s[\d:]+)')
EDITED_RE  = re.compile(r'\[EDITED\]\s*([\d-]+\s[\d:]+)')
VER_RE     = re.compile(r'\[VERSION\]\s*(\S+)')

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —à—É–º—É
HOT_KEYWORDS = [
    "–≤—ñ–¥ $2000", "–§—ñ–∫—Å–∞—Ü—ñ—è –∫—É—Ä—Å—É", "–æ–ø—Ç–æ–≤–∏–º –∫—É—Ä—Å–æ–º", "Tether", "USDT",
    "–∫—É–ø—é—Ä–∏", "–ì–ê–†–ù–û–ú–£ —Å—Ç–∞–Ω—ñ", "–∞–∫—Ü—ñ", "‚òé", "+380", "üì±", "Telegram",
    "–ê–î–†–ï–°–ò", "–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏", "–≤—É–ª.", "–ö–∏—ó–≤", "–ü–∞–ª–∞—Ü", "–º–µ—Ç—Ä–æ", 
    "‚åö", "üì®", "üîê", "‚úÖ", "üí∞", "üí∏", "–≤—ñ–¥ 10 000"
]

def is_hot_offer(line: str) -> bool:
    """–§—ñ–ª—å—Ç—Ä—É—î —Ä–µ–∫–ª–∞–º–Ω—ñ —Ä—è–¥–∫–∏"""
    ln = line.lower()
    return any(k.lower() in ln for k in HOT_KEYWORDS)

def clean_line(s: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç—É"""
    if not s:
        return s
    return (s.replace("‚Äì", "-")
             .replace("‚Äî", "-")
             .replace(",", ".")
             .strip())

def process_swaps():
    """–û–±—Ä–æ–±–∫–∞ SWAPS –∫–∞–Ω–∞–ª—É –∑ Supabase Storage"""
    
    # 1Ô∏è‚É£ –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ Supabase
    db = SupabaseIO()
    
    # 2Ô∏è‚É£ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ RAW –∑ Supabase Storage
    filename = f"{CHANNEL}_raw.txt"
    raw_content = download_text(filename)
    
    if not raw_content:
        print(f"[WARN] –§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Supabase Storage", flush=True)
        return
    
    print(f"[CLOUD] ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(raw_content)} —Å–∏–º–≤–æ–ª—ñ–≤ –∑ Supabase", flush=True)
    
    # 3Ô∏è‚É£ –ü–∞—Ä—Å–∏–º–æ RAW (–ë–ï–ó –§–Ü–õ–¨–¢–†–Ü–í - –∑–∞–ø–∏—Å—É—î–º–æ –í–°–ï)
    raw = raw_content.replace("[NO TEXT]", "")
    lines = raw.splitlines()
    blocks = iter_message_blocks(lines, ID_RE)
    
    # –°–æ—Ä—Ç—É—î–º–æ –±–ª–æ–∫–∏ –∑–∞ MESSAGE_ID
    sorted_blocks = []
    for b in blocks:
        mid = None
        for ln in b:
            m = ID_RE.search(ln)
            if m:
                mid = int(m.group(1))
                break
        if mid:
            sorted_blocks.append((mid, b))
    sorted_blocks.sort(key=lambda x: x[0])
    
    # 4Ô∏è‚É£ –í–∏—Ç—è–≥—É—î–º–æ –∫—É—Ä—Å–∏
    rows = []
    
    for _, block in sorted_blocks:
        msg_id = version = published = edited = None
        for ln in block:
            if not msg_id and (m := ID_RE.search(ln)):      msg_id = m.group(1)
            if not version and (v := VER_RE.search(ln)):    version = v.group(1)
            if not published and (d := DATE_RE.search(ln)): published = d.group(1)
            if not edited and (e := EDITED_RE.search(ln)):  edited = e.group(1)
        if not msg_id or not version or not published:
            continue
        if not edited:
            edited = published

        for ln in block:
            if is_hot_offer(ln):
                continue
            ln_clean = clean_line(ln)
            m = LINE_RE.search(ln_clean)
            if not m:
                continue

            cur_a = m.group(1).upper()
            cur_b = m.group(2).upper()
            buy  = norm_price_auto(m.group(3))
            sell = norm_price_auto(m.group(4))
            if not buy or not sell:
                continue

            comment = "" if "UAH" in (cur_a, cur_b) else f"–∫—Ä–æ—Å-–∫—É—Ä—Å ({cur_a}/{cur_b})"

            rows.append([CHANNEL, msg_id, version, published, edited,
                         cur_a, cur_b, buy, sell, comment])
    
    # 5Ô∏è‚É£ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Supabase –ë–î
    print(f"[PARSED] –ó–Ω–∞–π–¥–µ–Ω–æ: {len(rows)} –∫—É—Ä—Å—ñ–≤", flush=True)
    
    if rows:
        cross_rates = [r for r in rows if "–∫—Ä–æ—Å" in r[-1]]
        uah_rates = [r for r in rows if r[-1] == ""]
        print(f"  ‚Üí UAH –ø–∞—Ä: {len(uah_rates)} | –ö—Ä–æ—Å-–∫—É—Ä—Å—ñ–≤: {len(cross_rates)}", flush=True)
        
        inserted, skipped_db = db.insert_rates(CHANNEL, rows)
        print(f"[CLOUD] ‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î: {inserted} —Ä—è–¥–∫—ñ–≤", flush=True)
        if skipped_db > 0:
            print(f"[CLOUD] ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤: {skipped_db}", flush=True)
    else:
        print("[INFO] –ö—É—Ä—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", flush=True)
    
    print("[DONE] ‚úÖ –ì–æ—Ç–æ–≤–æ.", flush=True)

if __name__ == "__main__":
    process_swaps()
