# === fx_parse_SWAPS_auto_v2.py ===
"""
SWAPS Parser v2 ‚Äî –∑ –ø–æ–≤–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –¥–∞–Ω–∏—Ö —ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —á–∞—Å—ñ–≤, –≤–µ—Ä—Å—ñ–π, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.
"""

import re
from datetime import datetime
from supabase_io import get_raw_from_supabase, get_prev_rates, save_to_supabase, get_channel_id

CHANNEL = "SWAPS"

# === –†–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ ===
CURRENCY_RE = re.compile(
    r"(?mi)^\s*([A-Z]{3})\s*[-/]\s*([A-Z]{3})[^\d\n]*?([0-9]+[.,][0-9]+)\s*/\s*([0-9]+[.,][0-9]+)"
)

MESSAGE_ID_RE = re.compile(r"ID[:=]?\s*(\d+)")
VERSION_RE = re.compile(r"\bv(\d+)\b", re.IGNORECASE)
DATE_RE = re.compile(r"(\d{4}[-/]\d{2}[-/]\d{2}\s+\d{2}:\d{2}:\d{2})")

# === –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —á–∏—Å–µ–ª ===
def to_float(value):
    try:
        return float(str(value).replace(",", ".").strip())
    except:
        return None

# === –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω –∫—É—Ä—Å—É ===
def is_changed(new, old):
    if not old:
        return True
    try:
        nb, ns = new
        ob, os = old
        return abs(nb - ob) > 0.001 or abs(ns - os) > 0.001
    except:
        return True

# === –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç—É ===
def parse_text(text, prev_rates, channel_id):
    lines = text.splitlines()
    rows, skipped = [], 0
    message_id, version, published, edited = 0, "v1", None, None

    # –ü–æ—à—É–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö —É —Ç–µ–∫—Å—Ç—ñ
    msg_match = MESSAGE_ID_RE.search(text)
    ver_match = VERSION_RE.search(text)
    date_matches = DATE_RE.findall(text)

    if msg_match:
        message_id = int(msg_match.group(1))
    if ver_match:
        version = f"v{ver_match.group(1)}"
    if len(date_matches) >= 1:
        published = datetime.strptime(date_matches[0], "%Y-%m-%d %H:%M:%S")
    if len(date_matches) >= 2:
        edited = datetime.strptime(date_matches[1], "%Y-%m-%d %H:%M:%S")

    # –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–æ —Ä—è–¥–∫–∞—Ö
    for line in lines:
        m = CURRENCY_RE.search(line)
        if not m:
            continue

        a, b, buy, sell = m.groups()
        buy, sell = to_float(buy), to_float(sell)
        comment = ""

        key = (a, b, comment)
        if not is_changed((buy, sell), prev_rates.get(key)):
            skipped += 1
            continue

        prev_rates[key] = (buy, sell)

        row = {
            "channel_id": channel_id,
            "message_id": message_id,
            "version": version,
            "published": published,
            "edited": edited,
            "currency_a": a,
            "currency_b": b,
            "buy": buy,
            "sell": sell,
            "comment": comment,
        }
        rows.append(row)

    return rows, skipped


# === –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
def parse_once():
    print(f"\n[RUN] üîç –ü–∞—Ä—Å–∏–Ω–≥ {CHANNEL}")

    channel_id = get_channel_id(CHANNEL)
    print(f"[CLOUD] ‚úÖ channel_id={channel_id}")

    raw_text = get_raw_from_supabase(f"{CHANNEL}_raw.txt")
    if not raw_text:
        print(f"[WARN] RAW {CHANNEL}_raw.txt –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    prev = get_prev_rates(CHANNEL)
    rows, skipped = parse_text(raw_text, prev, channel_id)

    print(f"[DEBUG] –ì–æ—Ç–æ–≤–æ –¥–æ –∑–∞–ø–∏—Å—É: {len(rows)} —Ä—è–¥–∫—ñ–≤ (–ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped})")
    if rows:
        print(f"[DEBUG] –ü—Ä–∏–∫–ª–∞–¥ —Ä—è–¥–∫–∞: {rows[0]}")

    inserted = save_to_supabase(rows, CHANNEL)
    print(f"[OK] {CHANNEL} ‚Üí –¥–æ–¥–∞–Ω–æ {inserted}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped}")


if __name__ == "__main__":
    parse_once()
