# === db_adapter_cloud.py ===
import os
from supabase import create_client
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

SUPABASE_URL = os.environ["SUPABASE_URL"]
SUPABASE_KEY = os.environ["SUPABASE_KEY"]


class SupabaseAdapter:
    """Supabase –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è FX-–ø–∞—Ä—Å–µ—Ä—ñ–≤ (REST API + –∞–≤—Ç–æ-—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤)."""

    def __init__(self):
        if not SUPABASE_URL or not SUPABASE_KEY:
            raise ValueError("‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á—ñ Supabase —É .env")
        self.client = create_client(SUPABASE_URL, SUPABASE_KEY)
        print("[CLOUD] ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Supabase")

    def insert_rates(self, channel, rows):
        """–ó–∞–ø–∏—Å—É—î –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç —É —Ç–∞–±–ª–∏—Ü—é rates, —Å—Ç–≤–æ—Ä—é—î –∫–∞–Ω–∞–ª —è–∫—â–æ —Ç—Ä–µ–±–∞."""
        ch_id = self._get_or_create_channel(channel)
        inserted, skipped = 0, 0

        # –ë–∞—Ç—á—É–≤–∞–Ω–Ω—è (–ø–æ 10 —Ä—è–¥–∫—ñ–≤ –∑–∞ —Ä–∞–∑)
        batch_size = 10
        for i in range(0, len(rows), batch_size):
            batch = rows[i:i+batch_size]
            payload = []
            for r in batch:
                record = {
                    "channel_id": ch_id,
                    "message_id": int(r[1]) if r[1] else None,
                    "version": r[2],
                    "published": r[3],
                    "edited": r[4],
                    "currency_a": r[5],
                    "currency_b": r[6],
                    "buy": float(r[7]) if r[7] else None,
                    "sell": float(r[8]) if r[8] else None,
                    "comment": r[9],
                }
                payload.append(record)
            self.client.table("rates").insert(payload).execute()
            inserted += len(payload)

        print(f"[CLOUD] üåê {channel}: –¥–æ–¥–∞–Ω–æ {inserted}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped}")
        return inserted, skipped

    def _get_or_create_channel(self, name):
        resp = self.client.table("channels").select("id").eq("name", name).execute()
        if resp.data:
            return resp.data[0]["id"]
        insert = self.client.table("channels").insert({"name": name}).execute()
        return insert.data[0]["id"]
