# === main_runner.py ===
# –ó–∞–ø—É—Å–∫–∞—î –æ–¥–Ω–æ—á–∞—Å–Ω–æ Telegram‚Äë–ø–∞—Ä—Å–µ—Ä —ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ RAW
# –ë–µ–∑–ø–µ—á–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥—É (Render / Railway)

import subprocess
import threading
import time
import datetime
import os
import sys
import signal

# --- –ö–æ–ª—å–æ—Ä–∏ –ª–æ–≥—ñ–≤ (ANSI, —â–æ–± –±—É–ª–æ –≤–∏–¥–Ω–æ —ñ –ª–æ–∫–∞–ª—å–Ω–æ, —ñ –Ω–∞ Render) ---
class Colors:
    BLUE = "\033[94m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RED = "\033[91m"
    RESET = "\033[0m"

def log(message, color=Colors.GREEN):
    now = datetime.datetime.now().strftime("%H:%M:%S")
    print(f"{color}[{now}] {message}{Colors.RESET}", flush=True)

# --- –§–∞–π–ª–∏ –¥–ª—è –∑–∞–ø—É—Å–∫—É ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TG_SCRIPT = os.path.join(BASE_DIR, "telegram_fetcher.py")
RAW_WATCHER = os.path.join(BASE_DIR, "watch_raw_changes.py")

# --- –ë–µ–∑–ø–µ—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –∑ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–º ---
def safe_run(script_path):
    while True:
        try:
            log(f"üöÄ –ó–∞–ø—É—Å–∫ {os.path.basename(script_path)} ...", Colors.BLUE)
            subprocess.run(["python", script_path], cwd=BASE_DIR, check=True)
        except subprocess.CalledProcessError as e:
            log(f"‚ùå {os.path.basename(script_path)} –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –∫–æ–¥–æ–º {e.returncode}", Colors.RED)
        except Exception as e:
            log(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —É {os.path.basename(script_path)}: {e}", Colors.YELLOW)
        log(f"üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫...", Colors.YELLOW)
        time.sleep(10)

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
def main():
    log("=== üß† –°—Ç–∞—Ä—Ç —Å–∏—Å—Ç–µ–º–∏: Telegram Fetcher + RAW Watcher ===", Colors.GREEN)
    log(f"üìÅ –†–æ–±–æ—á–∞ –ø–∞–ø–∫–∞: {BASE_DIR}", Colors.BLUE)

    t1 = threading.Thread(target=safe_run, args=(TG_SCRIPT,), daemon=True)
    t2 = threading.Thread(target=safe_run, args=(RAW_WATCHER,), daemon=True)
    t1.start()
    t2.start()

    def shutdown_handler(sig, frame):
        log("üõë –ó—É–ø–∏–Ω–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (Ctrl+C –∞–±–æ SIGTERM).", Colors.RED)
        sys.exit(0)

    signal.signal(signal.SIGINT, shutdown_handler)
    signal.signal(signal.SIGTERM, shutdown_handler)

    while True:
        time.sleep(60)


if __name__ == "__main__":
    main()
